# encoding: utf-8

#
# WARNING: Do not edit by hand, this file was generated by Heroics:
#
#   https://github.com/interagent/heroics
#

require 'heroics'
require 'uri'

module StashAPI
  # Get a Client configured to use HTTP Basic authentication.
  #
  # @param api_key [String] The API key to use when connecting.
  # @param options [Hash<Symbol,String>] Optionally, custom settings
  #   to use with the client.  Allowed options are `default_headers`,
  #   `cache`, `user` and `url`.
  # @return [Client] A client configured to use the API with HTTP Basic
  #   authentication.
  def self.connect(api_key, options=nil)
    options = custom_options(options)
    uri = URI.parse(options[:url])
    uri.user = options.fetch(:user, 'user').gsub('@', '%40')
    uri.password = api_key
    client = Heroics.client_from_schema(SCHEMA, uri.to_s, options)
    Client.new(client)
  end

  # Get a Client configured to use OAuth authentication.
  #
  # @param oauth_token [String] The OAuth token to use with the API.
  # @param options [Hash<Symbol,String>] Optionally, custom settings
  #   to use with the client.  Allowed options are `default_headers`,
  #   `cache` and `url`.
  # @return [Client] A client configured to use the API with OAuth
  #   authentication.
  def self.connect_oauth(oauth_token, options=nil)
    options = custom_options(options)
    url = options[:url]
    client = Heroics.oauth_client_from_schema(oauth_token, SCHEMA, url, options)
    Client.new(client)
  end

  # Get a Client configured to use Token authentication.
  #
  # @param token [String] The token to use with the API.
  # @param options [Hash<Symbol,String>] Optionally, custom settings
  #   to use with the client.  Allowed options are `default_headers`,
  #   `cache` and `url`.
  # @return [Client] A client configured to use the API with OAuth
  #   authentication.
  def self.connect_token(token, options=nil)
    options = custom_options(options)
    url = options[:url]
    client = Heroics.token_client_from_schema(token, SCHEMA, url, options)
    Client.new(client)
  end

  # Get customized options.
  def self.custom_options(options)
    return default_options if options.nil?

    final_options = default_options
    if options[:default_headers]
      final_options[:default_headers].merge!(options[:default_headers])
    end
    final_options[:cache] = options[:cache] if options[:cache]
    final_options[:url] = options[:url] if options[:url]
    final_options[:user] = options[:user] if options[:user]
    final_options
  end

  # Get the default options.
  def self.default_options
    default_headers = {"Accept"=>"application/vnd.stash+json; version=1"}
    cache = Moneta.new(:Memory)
    {
      default_headers: default_headers,
      cache:           cache,
      url:             "https://jb-stash-api.herokuapp.com"
    }
  end

  private_class_method :default_options, :custom_options

  # Stash API.
  class Client
    def initialize(client)
      @client = client
    end

    # 
    #
    # @return [Collection]
    def collection
      @collection_resource ||= Collection.new(@client)
    end

    # FIXME
    #
    # @return [Resource]
    def resource
      @resource_resource ||= Resource.new(@client)
    end

    # FIXME
    #
    # @return [Tag]
    def tag
      @tag_resource ||= Tag.new(@client)
    end
  end

  private

  # 
  class Collection
    def initialize(client)
      @client = client
    end

    # Create a new collection.
    #
    # @param body: the object to pass as the request payload
    def create(body)
      @client.collection.create(body)
    end

    # Delete an existing collection.
    #
    # @param collection_identity: 
    def delete(collection_identity)
      @client.collection.delete(collection_identity)
    end

    # Info for existing collection.
    #
    # @param collection_identity: 
    def info(collection_identity)
      @client.collection.info(collection_identity)
    end

    # List existing collections.
    def list()
      @client.collection.list()
    end

    # Update an existing collection.
    #
    # @param collection_identity: 
    # @param body: the object to pass as the request payload
    def update(collection_identity, body)
      @client.collection.update(collection_identity, body)
    end
  end

  # FIXME
  class Resource
    def initialize(client)
      @client = client
    end

    # Create a new resource.
    #
    # @param body: the object to pass as the request payload
    def create(body)
      @client.resource.create(body)
    end

    # Delete an existing resource.
    #
    # @param resource_identity: 
    def delete(resource_identity)
      @client.resource.delete(resource_identity)
    end

    # Info for existing resource.
    #
    # @param resource_identity: 
    def info(resource_identity)
      @client.resource.info(resource_identity)
    end

    # List existing resources.
    def list()
      @client.resource.list()
    end

    # Update an existing resource.
    #
    # @param resource_identity: 
    # @param body: the object to pass as the request payload
    def update(resource_identity, body)
      @client.resource.update(resource_identity, body)
    end

    # Resources in collection.
    #
    # @param collection_identity: 
    def lists(collection_identity)
      @client.resource.lists(collection_identity)
    end
  end

  # FIXME
  class Tag
    def initialize(client)
      @client = client
    end

    # Create a new tag.
    #
    # @param body: the object to pass as the request payload
    def create(body)
      @client.tag.create(body)
    end

    # Delete an existing tag.
    #
    # @param tag_identity: 
    def delete(tag_identity)
      @client.tag.delete(tag_identity)
    end

    # Info for existing tag.
    #
    # @param tag_identity: 
    def info(tag_identity)
      @client.tag.info(tag_identity)
    end

    # List existing tags.
    def list()
      @client.tag.list()
    end

    # Update an existing tag.
    #
    # @param tag_identity: 
    # @param body: the object to pass as the request payload
    def update(tag_identity, body)
      @client.tag.update(tag_identity, body)
    end
  end

  SCHEMA = Heroics::Schema.new(MultiJson.load(<<-'HEROICS_SCHEMA'))
{"$schema":"http://json-schema.org/draft-04/hyper-schema","definitions":{"collection":{"$schema":"http://json-schema.org/draft-04/hyper-schema","title":"Collections","definitions":{"id":{"description":"unique identifier of collection","example":"01234567-89ab-cdef-0123-456789abcdef","format":"uuid","type":["string"]},"name":{"description":"Name of the collection","example":"My Collection","type":["string"]},"identity":{"$ref":"#/definitions/collection/definitions/id"},"created_at":{"description":"when collection was created","example":"2012-01-01T12:00:00Z","format":"date-time","type":["string"]},"updated_at":{"description":"when collection was updated","example":"2012-01-01T12:00:00Z","format":"date-time","type":["string","null"]}},"description":"","links":[{"description":"Create a new collection.","href":"/collections","method":"POST","rel":"create","schema":{"properties":{"name":{"$ref":"#/definitions/collection/definitions/name"}},"type":["object"]},"title":"Create"},{"description":"Delete an existing collection.","href":"/collections/{(%23%2Fdefinitions%2Fcollection%2Fdefinitions%2Fidentity)}","method":"DELETE","rel":"destroy","title":"Delete"},{"description":"Info for existing collection.","href":"/collections/{(%23%2Fdefinitions%2Fcollection%2Fdefinitions%2Fidentity)}","method":"GET","rel":"self","title":"Info"},{"description":"List existing collections.","href":"/collections","method":"GET","rel":"instances","title":"List"},{"description":"Update an existing collection.","href":"/collections/{(%23%2Fdefinitions%2Fcollection%2Fdefinitions%2Fidentity)}","method":"PATCH","rel":"update","schema":{"properties":{"name":{"$ref":"#/definitions/collection/definitions/name"}},"type":["object"]},"title":"Update"}],"properties":{"created_at":{"$ref":"#/definitions/collection/definitions/created_at"},"id":{"$ref":"#/definitions/collection/definitions/id"},"name":{"$ref":"#/definitions/collection/definitions/name"},"updated_at":{"$ref":"#/definitions/collection/definitions/updated_at"}},"type":["object"]},"resource":{"$schema":"http://json-schema.org/draft-04/hyper-schema","title":"Resource","definitions":{"id":{"description":"unique identifier of resource","example":"01234567-89ab-cdef-0123-456789abcdef","format":"uuid","type":["string"]},"title":{"description":"title of resource","example":"A title","type":["string"]},"identity":{"$ref":"#/definitions/resource/definitions/id"},"created_at":{"description":"when resource was created","example":"2012-01-01T12:00:00Z","format":"date-time","type":["string"]},"updated_at":{"description":"when resource was updated","example":"2012-01-01T12:00:00Z","format":"date-time","type":["string","null"]},"tags":{"description":"Tags","type":["array"],"items":{"type":["object"]}}},"description":"FIXME","links":[{"description":"Create a new resource.","href":"/resources","method":"POST","rel":"create","schema":{"properties":{},"type":["object"]},"title":"Create"},{"description":"Delete an existing resource.","href":"/resources/{(%23%2Fdefinitions%2Fresource%2Fdefinitions%2Fidentity)}","method":"DELETE","rel":"destroy","title":"Delete"},{"description":"Info for existing resource.","href":"/resources/{(%23%2Fdefinitions%2Fresource%2Fdefinitions%2Fidentity)}","method":"GET","rel":"self","title":"Info"},{"description":"List existing resources.","href":"/resources","method":"GET","rel":"instances","title":"List"},{"description":"Update an existing resource.","href":"/resources/{(%23%2Fdefinitions%2Fresource%2Fdefinitions%2Fidentity)}","method":"PATCH","rel":"update","schema":{"properties":{},"type":["object"]},"title":"Update"},{"description":"Resources in collection.","href":"/collections/{(%23%2Fdefinitions%2Fcollection%2Fdefinitions%2Fidentity)}/resources","method":"GET","rel":"instances","title":"Lists"}],"properties":{"created_at":{"$ref":"#/definitions/resource/definitions/created_at"},"id":{"$ref":"#/definitions/resource/definitions/id"},"title":{"$ref":"#/definitions/resource/definitions/title"},"updated_at":{"$ref":"#/definitions/resource/definitions/updated_at"},"tags":{"$ref":"#/definitions/resource/definitions/tags"}},"type":["object"]},"tag":{"$schema":"http://json-schema.org/draft-04/hyper-schema","title":"Tag","definitions":{"id":{"description":"unique identifier of tag","example":"01234567-89ab-cdef-0123-456789abcdef","format":"uuid","type":["string"]},"identity":{"$ref":"#/definitions/tag/definitions/id"},"name":{"description":"Name of the tag","example":"A Tag","type":["string"]}},"description":"FIXME","links":[{"description":"Create a new tag.","href":"/tags","method":"POST","rel":"create","schema":{"properties":{},"type":["object"]},"title":"Create"},{"description":"Delete an existing tag.","href":"/tags/{(%23%2Fdefinitions%2Ftag%2Fdefinitions%2Fidentity)}","method":"DELETE","rel":"destroy","title":"Delete"},{"description":"Info for existing tag.","href":"/tags/{(%23%2Fdefinitions%2Ftag%2Fdefinitions%2Fidentity)}","method":"GET","rel":"self","title":"Info"},{"description":"List existing tags.","href":"/tags","method":"GET","rel":"instances","title":"List"},{"description":"Update an existing tag.","href":"/tags/{(%23%2Fdefinitions%2Ftag%2Fdefinitions%2Fidentity)}","method":"PATCH","rel":"update","schema":{"properties":{},"type":["object"]},"title":"Update"}],"properties":{"id":{"$ref":"#/definitions/tag/definitions/id"},"name":{"$ref":"#/definitions/tag/definitions/name"}},"type":["object"]}},"properties":{"collection":{"$ref":"#/definitions/collection"},"resource":{"$ref":"#/definitions/resource"},"tag":{"$ref":"#/definitions/tag"}},"type":["object"],"description":"Stash API.","id":"stash-api","links":[{"href":"https://api.stash.com","rel":"self"}],"title":"Stash API"}
HEROICS_SCHEMA
end
